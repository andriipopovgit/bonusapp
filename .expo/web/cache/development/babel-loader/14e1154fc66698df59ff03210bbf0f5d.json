{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    var getBarCodeScannerPermissions = function getBarCodeScannerPermissions() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function getBarCodeScannerPermissions$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getBarCodeScannerPermissions();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting for camera permission\"\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(BarCodeScanner, {\n      onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n      style: StyleSheet.absoluteFillObject\n    }), scanned && _jsx(Button, {\n      title: 'Tap to Scan Again',\n      onPress: function onPress() {\n        return setScanned(false);\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  buttonContainer: {\n    backgroundColor: '#fff',\n    alignSelf: 'flex-end'\n  },\n  preview: {\n    alignSelf: 'stretch',\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","BarCodeScanner","App","hasPermission","setHasPermission","scanned","setScanned","getBarCodeScannerPermissions","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","alignItems","justifyContent","buttonContainer","backgroundColor","alignSelf","preview"],"sources":["C:/Users/Andrii/Desktop/CameraAppTutorial/App.js"],"sourcesContent":["// import { StatusBar } from 'expo-status-bar';\r\n// import { StyleSheet, Text, View, SafeAreaView, Button, Image } from 'react-native';\r\n// import { useEffect, useRef, useState } from 'react';\r\n// import { Camera } from 'expo-camera';\r\n// import { shareAsync } from 'expo-sharing';\r\n// import * as MediaLibrary from 'expo-media-library';\r\n\r\n// export default function App() {\r\n//   let cameraRef = useRef();\r\n//   const [hasCameraPermission, setHasCameraPermission] = useState();\r\n//   const [hasMediaLibraryPermission, setHasMediaLibraryPermission] = useState();\r\n//   const [photo, setPhoto] = useState();\r\n\r\n//   useEffect(() => {\r\n//     (async () => {\r\n//       const cameraPermission = await Camera.requestCameraPermissionsAsync();\r\n//       const mediaLibraryPermission = await MediaLibrary.requestPermissionsAsync();\r\n//       setHasCameraPermission(cameraPermission.status === \"granted\");\r\n//       setHasMediaLibraryPermission(mediaLibraryPermission.status === \"granted\");\r\n//     })();\r\n//   }, []);\r\n\r\n//   if (hasCameraPermission === undefined) {\r\n//     return <Text>Requesting permissions...</Text>\r\n//   } else if (!hasCameraPermission) {\r\n//     return <Text>Permission for camera not granted. Please change this in settings.</Text>\r\n//   }\r\n\r\n//   let takePic = async () => {\r\n//     let options = {\r\n//       quality: 1,\r\n//       base64: true,\r\n//       exif: false\r\n//     };\r\n\r\n//     let newPhoto = await cameraRef.current.takePictureAsync(options);\r\n//     setPhoto(newPhoto);\r\n//   };\r\n\r\n//   if (photo) {\r\n//     let sharePic = () => {\r\n//       shareAsync(photo.uri).then(() => {\r\n//         setPhoto(undefined);\r\n//       });\r\n//     };\r\n\r\n//     let savePhoto = () => {\r\n//       MediaLibrary.saveToLibraryAsync(photo.uri).then(() => {\r\n//         setPhoto(undefined);\r\n//       });\r\n//     };\r\n\r\n//     return (\r\n//       <SafeAreaView style={styles.container}>\r\n//         <Image style={styles.preview} source={{ uri: \"data:image/jpg;base64,\" + photo.base64 }} />\r\n//         <Button title=\"Share\" onPress={sharePic} />\r\n//         {hasMediaLibraryPermission ? <Button title=\"Save\" onPress={savePhoto} /> : undefined}\r\n//         <Button title=\"Discard\" onPress={() => setPhoto(undefined)} />\r\n//       </SafeAreaView>\r\n//     );\r\n//   }\r\n\r\n//   return (\r\n//     <Camera style={styles.container} ref={cameraRef}>\r\n//       <View style={styles.buttonContainer}>\r\n//         <Button title=\"Take Pic\" onPress={takePic} />\r\n//       </View>\r\n//       <StatusBar style=\"auto\" />\r\n//     </Camera>\r\n//   );\r\n// }\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Text, View, StyleSheet, Button } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\n\r\nexport default function App() {\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const getBarCodeScannerPermissions = async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    };\r\n\r\n    getBarCodeScannerPermissions();\r\n  }, []);\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  buttonContainer: {\r\n    backgroundColor: '#fff',\r\n    alignSelf: 'flex-end'\r\n  },\r\n  preview: {\r\n    alignSelf: 'stretch',\r\n    flex: 1\r\n  }\r\n});\r\n"],"mappings":";;AAwEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAC5B,gBAA0CH,QAAQ,CAAC,IAAD,CAAlD;EAAA;EAAA,IAAOI,aAAP;EAAA,IAAsBC,gBAAtB;;EACA,iBAA8BL,QAAQ,CAAC,KAAD,CAAtC;EAAA;EAAA,IAAOM,OAAP;EAAA,IAAgBC,UAAhB;;EAEAN,SAAS,CAAC,YAAM;IACd,IAAMO,4BAA4B,GAAG,SAA/BA,4BAA+B;MAAA;;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,iCACVN,cAAc,CAACO,uBAAf,EADU;;YAAA;cAAA;cAC3BC,MAD2B,yBAC3BA,MAD2B;cAEnCL,gBAAgB,CAACK,MAAM,KAAK,SAAZ,CAAhB;;YAFmC;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAArC;;IAKAF,4BAA4B;EAC7B,CAPQ,EAON,EAPM,CAAT;;EASA,IAAMG,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;IAAA,IAAjBC,IAAiB,QAAjBA,IAAiB;IAAA,IAAXC,IAAW,QAAXA,IAAW;IAC/CN,UAAU,CAAC,IAAD,CAAV;IACAO,KAAK,yBAAuBF,IAAvB,kBAAwCC,IAAxC,wBAAL;EACD,CAHD;;EAKA,IAAIT,aAAa,KAAK,IAAtB,EAA4B;IAC1B,OAAO,KAAC,IAAD;MAAA;IAAA,EAAP;EACD;;EACD,IAAIA,aAAa,KAAK,KAAtB,EAA6B;IAC3B,OAAO,KAAC,IAAD;MAAA;IAAA,EAAP;EACD;;EAED,OACE,MAAC,IAAD;IAAM,KAAK,EAAEW,MAAM,CAACC,SAApB;IAAA,WACE,KAAC,cAAD;MACE,gBAAgB,EAAEV,OAAO,GAAGW,SAAH,GAAeN,oBAD1C;MAEE,KAAK,EAAEO,UAAU,CAACC;IAFpB,EADF,EAKGb,OAAO,IAAI,KAAC,MAAD;MAAQ,KAAK,EAAE,mBAAf;MAAoC,OAAO,EAAE;QAAA,OAAMC,UAAU,CAAC,KAAD,CAAhB;MAAA;IAA7C,EALd;EAAA,EADF;AASD;AAED,IAAMQ,MAAM,GAAGG,UAAU,CAACE,MAAX,CAAkB;EAC/BJ,SAAS,EAAE;IACTK,IAAI,EAAE,CADG;IAETC,UAAU,EAAE,QAFH;IAGTC,cAAc,EAAE;EAHP,CADoB;EAM/BC,eAAe,EAAE;IACfC,eAAe,EAAE,MADF;IAEfC,SAAS,EAAE;EAFI,CANc;EAU/BC,OAAO,EAAE;IACPD,SAAS,EAAE,SADJ;IAEPL,IAAI,EAAE;EAFC;AAVsB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}